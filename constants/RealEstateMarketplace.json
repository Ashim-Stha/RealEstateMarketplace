{
    "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "abi": [
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_assestContract",
                    "type": "address"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "constructor"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "tokenId",
                    "type": "uint256"
                }
            ],
            "name": "AlreadyListed",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "NoProceeds",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "NotApprovedForMarketplace",
            "type": "error"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "tokenId",
                    "type": "uint256"
                }
            ],
            "name": "NotListed",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "NotOwner",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "PriceMustBeAboveZero",
            "type": "error"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "tokenId",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "price",
                    "type": "uint256"
                }
            ],
            "name": "PriceNotMet",
            "type": "error"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "buyer",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "uint256",
                    "name": "tokenId",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "price",
                    "type": "uint256"
                }
            ],
            "name": "AssestBought",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "seller",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "uint256",
                    "name": "tokenId",
                    "type": "uint256"
                }
            ],
            "name": "AssestCanceled",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "seller",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "uint256",
                    "name": "tokenId",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "price",
                    "type": "uint256"
                }
            ],
            "name": "AssestListed",
            "type": "event"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "tokenId",
                    "type": "uint256"
                }
            ],
            "name": "buyAssest",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "tokenId",
                    "type": "uint256"
                }
            ],
            "name": "cancelListing",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "tokenId",
                    "type": "uint256"
                }
            ],
            "name": "getListing",
            "outputs": [
                {
                    "components": [
                        {
                            "internalType": "uint256",
                            "name": "price",
                            "type": "uint256"
                        },
                        {
                            "internalType": "address",
                            "name": "seller",
                            "type": "address"
                        }
                    ],
                    "internalType": "struct RealEstateMarketplace.Listing",
                    "name": "",
                    "type": "tuple"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "tokenId",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "price",
                    "type": "uint256"
                }
            ],
            "name": "listAssest",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "tokenId",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "newPrice",
                    "type": "uint256"
                }
            ],
            "name": "updateListing",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "withdrawProceeds",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        }
    ],
    "transactionHash": "0xef7076c562ba97b370a5dd8d9bada5d735bfebc3deb4ca6badca7750459c5114",
    "receipt": {
        "to": null,
        "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
        "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
        "transactionIndex": 0,
        "gasUsed": "1036436",
        "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "blockHash": "0x93875137404be0b4b116933e7a0b084f2a0307c24d8273d8ccf085cbc5517a5c",
        "transactionHash": "0xef7076c562ba97b370a5dd8d9bada5d735bfebc3deb4ca6badca7750459c5114",
        "logs": [],
        "blockNumber": 2,
        "cumulativeGasUsed": "1036436",
        "status": 1,
        "byzantium": true
    },
    "args": ["0x5FbDB2315678afecb367f032d93F642f64180aa3"],
    "numDeployments": 1,
    "solcInputHash": "01b27b2d9cdfb2987cb1b1179d709112",
    "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_assestContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"AlreadyListed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoProceeds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotApprovedForMarketplace\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"NotListed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PriceMustBeAboveZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"PriceNotMet\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"AssestBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"AssestCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"AssestListed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"buyAssest\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"cancelListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getListing\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"internalType\":\"struct RealEstateMarketplace.Listing\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"listAssest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"updateListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawProceeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RealEstateMarketplace.sol\":\"RealEstateMarketplace\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/RealEstateMarketplace.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nerror PriceMustBeAboveZero();\\nerror NotApprovedForMarketplace();\\nerror AlreadyListed(uint256 tokenId);\\nerror NotOwner();\\nerror NotListed(uint256 tokenId);\\nerror PriceNotMet(uint256 tokenId, uint256 price);\\nerror NoProceeds();\\n\\ncontract RealEstateMarketplace is ReentrancyGuard {\\n    struct Listing {\\n        uint256 price;\\n        address seller;\\n    }\\n\\n    IERC721 private immutable assestContract;\\n    mapping(uint256 => Listing) private listings;\\n    mapping(address => uint256) private proceeds;\\n\\n    constructor(address _assestContract) {\\n        assestContract = IERC721(_assestContract);\\n    }\\n\\n    modifier notListed(uint256 tokenId) {\\n        if (listings[tokenId].price > 0) {\\n            revert AlreadyListed(tokenId);\\n        }\\n        _;\\n    }\\n\\n    modifier isOwner(uint256 tokenId, address spender) {\\n        address owner = assestContract.ownerOf(tokenId);\\n        if (spender != owner) {\\n            revert NotOwner();\\n        }\\n        _;\\n    }\\n\\n    modifier isListed(uint256 tokenId) {\\n        if (listings[tokenId].price <= 0) {\\n            revert NotListed(tokenId);\\n        }\\n        _;\\n    }\\n\\n    function listAssest(uint256 tokenId, uint256 price) external notListed(tokenId) isOwner(tokenId, msg.sender) {\\n        if (price <= 0) {\\n            revert PriceMustBeAboveZero();\\n        }\\n\\n        if (assestContract.getApproved(tokenId) != address(this)) {\\n            revert NotApprovedForMarketplace();\\n        }\\n\\n        listings[tokenId] = Listing(price, msg.sender);\\n        emit AssestListed(msg.sender, tokenId, price);\\n    }\\n\\n    function buyAssest(uint256 tokenId) external payable nonReentrant isListed(tokenId) {\\n        Listing memory listedAssest = listings[tokenId];\\n        if (msg.value < listedAssest.price) {\\n            revert PriceNotMet(tokenId, listedAssest.price);\\n        }\\n\\n        proceeds[listedAssest.seller] += msg.value;\\n        delete listings[tokenId];\\n        assestContract.safeTransferFrom(listedAssest.seller, msg.sender, tokenId);\\n\\n        emit AssestBought(msg.sender, tokenId, listedAssest.price);\\n    }\\n\\n    function cancelListing(uint256 tokenId) external isOwner(tokenId, msg.sender) {\\n        delete listings[tokenId];\\n        emit AssestCanceled(msg.sender, tokenId);\\n    }\\n\\n    function updateListing(uint256 tokenId, uint256 newPrice) external isOwner(tokenId, msg.sender) {\\n        listings[tokenId].price = newPrice;\\n        emit AssestListed(msg.sender, tokenId, newPrice);\\n    }\\n\\n    function withdrawProceeds() external {\\n        uint256 proceed = proceeds[msg.sender];\\n        if (proceed <= 0) {\\n            revert NoProceeds();\\n        }\\n\\n        proceeds[msg.sender] = 0;\\n        (bool success,) = payable(msg.sender).call{value: proceed}(\\\"\\\");\\n        require(success, \\\"Transfer failed\\\");\\n    }\\n\\n    function getListing(uint256 tokenId) external view returns (Listing memory) {\\n        return listings[tokenId];\\n    }\\n\\n    // Events\\n    event AssestListed(address indexed seller, uint256 indexed tokenId, uint256 price);\\n    event AssestBought(address indexed buyer, uint256 indexed tokenId, uint256 price);\\n    event AssestCanceled(address indexed seller, uint256 indexed tokenId);\\n}\\n\",\"keccak256\":\"0x16481a9cb98d6e1b5ac21b3399471fa6f412ec860313ddfb5be9306e9db25048\",\"license\":\"MIT\"}},\"version\":1}",
    "bytecode": "0x60a06040523480156200001157600080fd5b50604051620012bd380380620012bd8339818101604052810190620000379190620000e7565b60016000819055508073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250505062000119565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000af8262000082565b9050919050565b620000c181620000a2565b8114620000cd57600080fd5b50565b600081519050620000e181620000b6565b92915050565b6000602082840312156200010057620000ff6200007d565b5b60006200011084828501620000d0565b91505092915050565b60805160601c611169620001546000396000818161014b015281816105730152818161066a015281816109dd0152610b3e01526111696000f3fe6080604052600436106100555760003560e01c80630179ea881461005a578063107a274a1461008357806318b73e7b146100c0578063305a67a8146100dc5780639038e69314610105578063fe74f3891461011c575b600080fd5b34801561006657600080fd5b50610081600480360381019061007c9190610d86565b610145565b005b34801561008f57600080fd5b506100aa60048036038101906100a59190610dc6565b6102ca565b6040516100b79190610e72565b60405180910390f35b6100da60048036038101906100d59190610dc6565b610357565b005b3480156100e857600080fd5b5061010360048036038101906100fe9190610dc6565b610664565b005b34801561011157600080fd5b5061011a610807565b005b34801561012857600080fd5b50610143600480360381019061013e9190610d86565b61097a565b005b813360007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16636352211e846040518263ffffffff1660e01b81526004016101a29190610e9c565b60206040518083038186803b1580156101ba57600080fd5b505afa1580156101ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101f29190610ee3565b90508073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610259576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b836001600087815260200190815260200160002060000181905550843373ffffffffffffffffffffffffffffffffffffffff167f18e5bac5dfa922870065f549fe79e4369bbb3075b63ead55ee1bc3ad9714e8a0866040516102bb9190610e9c565b60405180910390a35050505050565b6102d2610d1b565b60016000838152602001908152602001600020604051806040016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050919050565b6002600054141561039d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161039490610f6d565b60405180910390fd5b600260008190555080600060016000838152602001908152602001600020600001541161040157806040517fd176cea00000000000000000000000000000000000000000000000000000000081526004016103f89190610e9c565b60405180910390fd5b600060016000848152602001908152602001600020604051806040016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050905080600001513410156104d2578281600001516040517fbc03bccd0000000000000000000000000000000000000000000000000000000081526004016104c9929190610f8d565b60405180910390fd5b3460026000836020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105259190610fe5565b92505081905550600160008481526020019081526020016000206000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166342842e0e826020015133866040518463ffffffff1660e01b81526004016105d29392919061104a565b600060405180830381600087803b1580156105ec57600080fd5b505af1158015610600573d6000803e3d6000fd5b50505050823373ffffffffffffffffffffffffffffffffffffffff167fca0038d876d7cf19ef0edff3b729a10cdb74023716396796217fbb3cf1bf51fe836000015160405161064f9190610e9c565b60405180910390a35050600160008190555050565b803360007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16636352211e846040518263ffffffff1660e01b81526004016106c19190610e9c565b60206040518083038186803b1580156106d957600080fd5b505afa1580156106ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107119190610ee3565b90508073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610778576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160008581526020019081526020016000206000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690555050833373ffffffffffffffffffffffffffffffffffffffff167fceb0777f0a94318365b5d9c7fd7c7467e5c20ad232b90414634e697944ceda3360405160405180910390a350505050565b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008111610885576040517fc4d8fa8700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060003373ffffffffffffffffffffffffffffffffffffffff16826040516108f0906110b2565b60006040518083038185875af1925050503d806000811461092d576040519150601f19603f3d011682016040523d82523d6000602084013e610932565b606091505b5050905080610976576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161096d90611113565b60405180910390fd5b5050565b816000600160008381526020019081526020016000206000015411156109d757806040517f7fbcdff90000000000000000000000000000000000000000000000000000000081526004016109ce9190610e9c565b60405180910390fd5b823360007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16636352211e846040518263ffffffff1660e01b8152600401610a349190610e9c565b60206040518083038186803b158015610a4c57600080fd5b505afa158015610a60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a849190610ee3565b90508073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610aeb576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008511610b25576040517fe1abbfc500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663081812fc886040518263ffffffff1660e01b8152600401610b959190610e9c565b60206040518083038186803b158015610bad57600080fd5b505afa158015610bc1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be59190610ee3565b73ffffffffffffffffffffffffffffffffffffffff1614610c32576040517f4be3a2c500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60405180604001604052808681526020013373ffffffffffffffffffffffffffffffffffffffff16815250600160008881526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550905050853373ffffffffffffffffffffffffffffffffffffffff167f18e5bac5dfa922870065f549fe79e4369bbb3075b63ead55ee1bc3ad9714e8a087604051610d0b9190610e9c565b60405180910390a3505050505050565b604051806040016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b600080fd5b6000819050919050565b610d6381610d50565b8114610d6e57600080fd5b50565b600081359050610d8081610d5a565b92915050565b60008060408385031215610d9d57610d9c610d4b565b5b6000610dab85828601610d71565b9250506020610dbc85828601610d71565b9150509250929050565b600060208284031215610ddc57610ddb610d4b565b5b6000610dea84828501610d71565b91505092915050565b610dfc81610d50565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610e2d82610e02565b9050919050565b610e3d81610e22565b82525050565b604082016000820151610e596000850182610df3565b506020820151610e6c6020850182610e34565b50505050565b6000604082019050610e876000830184610e43565b92915050565b610e9681610d50565b82525050565b6000602082019050610eb16000830184610e8d565b92915050565b610ec081610e22565b8114610ecb57600080fd5b50565b600081519050610edd81610eb7565b92915050565b600060208284031215610ef957610ef8610d4b565b5b6000610f0784828501610ece565b91505092915050565b600082825260208201905092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000610f57601f83610f10565b9150610f6282610f21565b602082019050919050565b60006020820190508181036000830152610f8681610f4a565b9050919050565b6000604082019050610fa26000830185610e8d565b610faf6020830184610e8d565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610ff082610d50565b9150610ffb83610d50565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156110305761102f610fb6565b5b828201905092915050565b61104481610e22565b82525050565b600060608201905061105f600083018661103b565b61106c602083018561103b565b6110796040830184610e8d565b949350505050565b600081905092915050565b50565b600061109c600083611081565b91506110a78261108c565b600082019050919050565b60006110bd8261108f565b9150819050919050565b7f5472616e73666572206661696c65640000000000000000000000000000000000600082015250565b60006110fd600f83610f10565b9150611108826110c7565b602082019050919050565b6000602082019050818103600083015261112c816110f0565b905091905056fea2646970667358221220ab038ae2ea52f623fe0cb6fb7b03502181c7d05bf941894ad599f0af36831e0564736f6c63430008080033",
    "deployedBytecode": "0x6080604052600436106100555760003560e01c80630179ea881461005a578063107a274a1461008357806318b73e7b146100c0578063305a67a8146100dc5780639038e69314610105578063fe74f3891461011c575b600080fd5b34801561006657600080fd5b50610081600480360381019061007c9190610d86565b610145565b005b34801561008f57600080fd5b506100aa60048036038101906100a59190610dc6565b6102ca565b6040516100b79190610e72565b60405180910390f35b6100da60048036038101906100d59190610dc6565b610357565b005b3480156100e857600080fd5b5061010360048036038101906100fe9190610dc6565b610664565b005b34801561011157600080fd5b5061011a610807565b005b34801561012857600080fd5b50610143600480360381019061013e9190610d86565b61097a565b005b813360007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16636352211e846040518263ffffffff1660e01b81526004016101a29190610e9c565b60206040518083038186803b1580156101ba57600080fd5b505afa1580156101ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101f29190610ee3565b90508073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610259576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b836001600087815260200190815260200160002060000181905550843373ffffffffffffffffffffffffffffffffffffffff167f18e5bac5dfa922870065f549fe79e4369bbb3075b63ead55ee1bc3ad9714e8a0866040516102bb9190610e9c565b60405180910390a35050505050565b6102d2610d1b565b60016000838152602001908152602001600020604051806040016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050919050565b6002600054141561039d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161039490610f6d565b60405180910390fd5b600260008190555080600060016000838152602001908152602001600020600001541161040157806040517fd176cea00000000000000000000000000000000000000000000000000000000081526004016103f89190610e9c565b60405180910390fd5b600060016000848152602001908152602001600020604051806040016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050905080600001513410156104d2578281600001516040517fbc03bccd0000000000000000000000000000000000000000000000000000000081526004016104c9929190610f8d565b60405180910390fd5b3460026000836020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105259190610fe5565b92505081905550600160008481526020019081526020016000206000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166342842e0e826020015133866040518463ffffffff1660e01b81526004016105d29392919061104a565b600060405180830381600087803b1580156105ec57600080fd5b505af1158015610600573d6000803e3d6000fd5b50505050823373ffffffffffffffffffffffffffffffffffffffff167fca0038d876d7cf19ef0edff3b729a10cdb74023716396796217fbb3cf1bf51fe836000015160405161064f9190610e9c565b60405180910390a35050600160008190555050565b803360007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16636352211e846040518263ffffffff1660e01b81526004016106c19190610e9c565b60206040518083038186803b1580156106d957600080fd5b505afa1580156106ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107119190610ee3565b90508073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610778576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160008581526020019081526020016000206000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690555050833373ffffffffffffffffffffffffffffffffffffffff167fceb0777f0a94318365b5d9c7fd7c7467e5c20ad232b90414634e697944ceda3360405160405180910390a350505050565b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008111610885576040517fc4d8fa8700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060003373ffffffffffffffffffffffffffffffffffffffff16826040516108f0906110b2565b60006040518083038185875af1925050503d806000811461092d576040519150601f19603f3d011682016040523d82523d6000602084013e610932565b606091505b5050905080610976576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161096d90611113565b60405180910390fd5b5050565b816000600160008381526020019081526020016000206000015411156109d757806040517f7fbcdff90000000000000000000000000000000000000000000000000000000081526004016109ce9190610e9c565b60405180910390fd5b823360007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16636352211e846040518263ffffffff1660e01b8152600401610a349190610e9c565b60206040518083038186803b158015610a4c57600080fd5b505afa158015610a60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a849190610ee3565b90508073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610aeb576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008511610b25576040517fe1abbfc500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663081812fc886040518263ffffffff1660e01b8152600401610b959190610e9c565b60206040518083038186803b158015610bad57600080fd5b505afa158015610bc1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be59190610ee3565b73ffffffffffffffffffffffffffffffffffffffff1614610c32576040517f4be3a2c500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60405180604001604052808681526020013373ffffffffffffffffffffffffffffffffffffffff16815250600160008881526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550905050853373ffffffffffffffffffffffffffffffffffffffff167f18e5bac5dfa922870065f549fe79e4369bbb3075b63ead55ee1bc3ad9714e8a087604051610d0b9190610e9c565b60405180910390a3505050505050565b604051806040016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b600080fd5b6000819050919050565b610d6381610d50565b8114610d6e57600080fd5b50565b600081359050610d8081610d5a565b92915050565b60008060408385031215610d9d57610d9c610d4b565b5b6000610dab85828601610d71565b9250506020610dbc85828601610d71565b9150509250929050565b600060208284031215610ddc57610ddb610d4b565b5b6000610dea84828501610d71565b91505092915050565b610dfc81610d50565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610e2d82610e02565b9050919050565b610e3d81610e22565b82525050565b604082016000820151610e596000850182610df3565b506020820151610e6c6020850182610e34565b50505050565b6000604082019050610e876000830184610e43565b92915050565b610e9681610d50565b82525050565b6000602082019050610eb16000830184610e8d565b92915050565b610ec081610e22565b8114610ecb57600080fd5b50565b600081519050610edd81610eb7565b92915050565b600060208284031215610ef957610ef8610d4b565b5b6000610f0784828501610ece565b91505092915050565b600082825260208201905092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000610f57601f83610f10565b9150610f6282610f21565b602082019050919050565b60006020820190508181036000830152610f8681610f4a565b9050919050565b6000604082019050610fa26000830185610e8d565b610faf6020830184610e8d565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610ff082610d50565b9150610ffb83610d50565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156110305761102f610fb6565b5b828201905092915050565b61104481610e22565b82525050565b600060608201905061105f600083018661103b565b61106c602083018561103b565b6110796040830184610e8d565b949350505050565b600081905092915050565b50565b600061109c600083611081565b91506110a78261108c565b600082019050919050565b60006110bd8261108f565b9150819050919050565b7f5472616e73666572206661696c65640000000000000000000000000000000000600082015250565b60006110fd600f83610f10565b9150611108826110c7565b602082019050919050565b6000602082019050818103600083015261112c816110f0565b905091905056fea2646970667358221220ab038ae2ea52f623fe0cb6fb7b03502181c7d05bf941894ad599f0af36831e0564736f6c63430008080033",
    "devdoc": {
        "kind": "dev",
        "methods": {},
        "version": 1
    },
    "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
    },
    "storageLayout": {
        "storage": [
            {
                "astId": 10,
                "contract": "contracts/RealEstateMarketplace.sol:RealEstateMarketplace",
                "label": "_status",
                "offset": 0,
                "slot": "0",
                "type": "t_uint256"
            },
            {
                "astId": 2035,
                "contract": "contracts/RealEstateMarketplace.sol:RealEstateMarketplace",
                "label": "listings",
                "offset": 0,
                "slot": "1",
                "type": "t_mapping(t_uint256,t_struct(Listing)2027_storage)"
            },
            {
                "astId": 2039,
                "contract": "contracts/RealEstateMarketplace.sol:RealEstateMarketplace",
                "label": "proceeds",
                "offset": 0,
                "slot": "2",
                "type": "t_mapping(t_address,t_uint256)"
            }
        ],
        "types": {
            "t_address": {
                "encoding": "inplace",
                "label": "address",
                "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => uint256)",
                "numberOfBytes": "32",
                "value": "t_uint256"
            },
            "t_mapping(t_uint256,t_struct(Listing)2027_storage)": {
                "encoding": "mapping",
                "key": "t_uint256",
                "label": "mapping(uint256 => struct RealEstateMarketplace.Listing)",
                "numberOfBytes": "32",
                "value": "t_struct(Listing)2027_storage"
            },
            "t_struct(Listing)2027_storage": {
                "encoding": "inplace",
                "label": "struct RealEstateMarketplace.Listing",
                "members": [
                    {
                        "astId": 2024,
                        "contract": "contracts/RealEstateMarketplace.sol:RealEstateMarketplace",
                        "label": "price",
                        "offset": 0,
                        "slot": "0",
                        "type": "t_uint256"
                    },
                    {
                        "astId": 2026,
                        "contract": "contracts/RealEstateMarketplace.sol:RealEstateMarketplace",
                        "label": "seller",
                        "offset": 0,
                        "slot": "1",
                        "type": "t_address"
                    }
                ],
                "numberOfBytes": "64"
            },
            "t_uint256": {
                "encoding": "inplace",
                "label": "uint256",
                "numberOfBytes": "32"
            }
        }
    }
}
